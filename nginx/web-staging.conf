########### 每个指令必须有分号结束。#################

# 加载 ngx_http_js_module 模块，适用于 njs 模块编译为动态模块时
#load_module modules/ngx_http_js_module.so;

user root;  #配置用户或者组，默认为nobody nobody。

worker_processes 2;  #允许生成的进程数，默认为1

pid /var/run/nginx.pid;   #指定nginx进程运行文件存放地址

error_log /var/log/nginx/error.log info;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg

events {
    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off
    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    worker_connections  1024;    #最大连接数
}

http {
    include       mime.types;   #文件扩展名与文件类型映射表
    default_type  application/json; #默认文件类型，默认为text/plain

    #js_import fetch_env.js;
    #js_set $gateway_url fetch_gateway_url;

    #自定义日志格式
    log_format access_log_format '[$time_iso8601] - pid: $pid request info:\n'
                                        '    地址：$request_uri \n    方式：$request_method \n    请求cookie：$http_cookie \n    参数：$args \n    请求体：$request_body \n    状态：$status \n'; 
    access_log /var/log/nginx/access.log access_log_format;  #combined为日志格式的默认值

    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    sendfile_max_chunk 0;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    keepalive_timeout 30;  #连接超时时间，默认为65s，可以在http，server，location块。

    # map定义：创建一个新变量，其值依赖于第一个参数中指定的一个或多个源变量的值。
    # map指令的作用：
    #  该作用主要是根据客户端请求中$http_upgrade 的值，来构造改变$connection_upgrade的值，即根据变量$http_upgrade的值创建新的变量
    #  $connection_upgrade，创建的规则就是{}里面的东西。其中的规则没有做匹配，因此使用默认的，即 $connection_upgrade 的值会一直是 upgrade。
    #  然后如果 $http_upgrade为空字符串的话，那值会是 close。
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        gzip on; # gzip压缩
        keepalive_requests 120; #单连接请求上限次数。

        listen       8086;   #监听端口
        server_name  localhost;   #监听地址    

        client_max_body_size 0;
	    client_body_buffer_size 128k;

		location / {
			root /usr/share/nginx/html; # 站点根目录
			index index.html; # 站点首页
			# 禁用缓存
            # no-cache:缓存但重新验证。此方式下，每次有请求发出时，缓存会将此请求发到服务器（译者注：该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期（注：实际就是返回304），则缓存才使用本地缓存副本。
			add_header Cache-Control no-store; # 缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。
            try_files $uri $uri/ @router;
		}

        location ~ .*\.(gif|jpg|png|ico|swf|woff)$ {
            root /usr/share/nginx/html; # 站点根目录，在该location中必须配置，否则返回的是index.html
            add_header Cache-Control "max-age=3600;public"; # 默认是private，"public" 指令表示该响应可以被任何中间人（译者注：比如中间代理、CDN等）缓存。若指定了"public"，则一些通常不被中间人缓存的页面（译者注：因为默认是private）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定状态码的页面），将会被其缓存。而 "private" 则表示该响应是专用于某单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。

            try_files $uri $uri/ @router;
        }

        location ~ .*\.(css|js)$ {
            root /usr/share/nginx/html; # 站点根目录，在该location中必须配置，否则返回的是index.html
            add_header Cache-Control "max-age=3600;public";
            add_header X-Content-Type-Options nosniff;
            try_files $uri $uri/ @router;
        }

        # 由于路由的资源不一定是真实的路径，无法找到具体文件
	    # 所以需要将请求重写到 index.html 中，然后交给真正的 Vue 路由处理请求资源
        location @router {
            rewrite ^.*$ /index.html last; # 接到截取的uri 并按一定规则重写uri和vue路由跳转
        }

        location /api/ccs/ {
           proxy_pass  http://ccs-traefik.ccs/;
           proxy_connect_timeout 30;
        }

        location /api/ccs/websocket/ {
           proxy_pass  http://ccs-traefik.ccs/;
           proxy_connect_timeout 30;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection $connection_upgrade;
        }
    }
}